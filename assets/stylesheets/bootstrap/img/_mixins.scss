// Keep images from scaling beyond the width of their parents.
@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

// Special

// Short retina mixin for setting background-image and -size. Note that the
// spelling of `min--moz-device-pixel-ratio` is intentional.
@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {
  background-image: url(image-path("#{$file-1x}"));

  @media
  only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (   min--moz-device-pixel-ratio: 2),
  only screen and (     -o-min-device-pixel-ratio: 2/1),
  only screen and (        min-device-pixel-ratio: 2),
  only screen and (                min-resolution: 192dpi),
  only screen and (                min-resolution: 2dppx) {
    background-image: url(image-path("#{$file-2x}"));
    background-size: $width-1x $height-1x;
  }
}


// My (gambala) non adapted yet addons

@mixin background-cover($top:center, $left:center) {
  background-repeat: no-repeat;
  background-position: $top $left;
  background-size: cover;
}

@mixin image($image, $image-width, $image-height) {
  background-image: image_url($image);
  background-repeat: no-repeat;
  background-size: 100%;
  height: $image-height;
  width: $image-width;
}

@mixin retina-bg($lq-image, $hq-image, $repeat, $image-width, $image-height) {
  background-image: image_url($lq-image);
  background-repeat: $repeat;
  @media print,
         (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: image_url($hq-image);
    background-size: $image-width $image-height;
  }
}

@mixin retina-cover($lq-image, $hq-image) {
  background-image: image_url($lq-image);
  @include background-cover();
  @media print,
         (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: image_url($hq-image);
  }
}

@mixin retina-image($lq-image, $hq-image, $image-width, $image-height) {
  @include image($lq-image, $image-width, $image-height);
  @media print,
         (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: image_url($hq-image);
    background-size: 100%;
  }
}

@mixin svg-cover($bitmap-image, $svg-image) {
  background-image: image_url($bitmap-image);
  @include background-cover();
  @media print,
         (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    .svg & {
      background-image: image_url($svg-image);
      background-size: 100%;
    }
  }
}

@mixin svg-image($bitmap-image, $svg-image, $image-width, $image-height) {
  @include image($bitmap-image, $image-width, $image-height);
  @media print,
         (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    .svg & {
      background-image: image_url($svg-image);
      background-size: 100%;
    }
  }
}
