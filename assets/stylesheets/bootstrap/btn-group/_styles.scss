@import "bootstrap/base/font-size/variables";
@import "bootstrap/base/line-height/variables";
@import "bootstrap/base/padding/variables";
@import "bootstrap/btn/variables";
@import "bootstrap/base/mixins/border-radius";
@import "bootstrap/btn/mixins";
@import "bootstrap/base/mixins/clearfix";

// Component

.btn-group {
  display: inline-block;
  position: relative;
  vertical-align: middle; // match .btn alignment given font-size hack above
}

// Elements

.btn-group {
  > .btn {
    float: left;
    position: relative;

    // Bring the "active" button to the front
    &:hover,
    &:active,
    &.active {
      z-index: 2;
    }
  }

  // Prevent double borders when buttons are next to each other
  .btn + .btn,
  .btn + .btn-group,
  .btn-group + .btn,
  .btn-group + .btn-group {
    margin-left: -1px;
  }

  > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {
    border-radius: 0;
  }

  > .btn:first-child {
    margin-left: 0;

    &:not(:last-child):not(.dropdown-toggle) {
      @include border-right-radius(0);
    }
  }

  // Set corners individual because sometimes a single button can be in a .btn-group and we need :first-child and :last-child to both match
  // Need .dropdown-toggle since :last-child doesn't apply given a .dropdown-menu immediately after it
  > .btn:last-child:not(:first-child),
  > .dropdown-toggle:not(:first-child) {
    @include border-left-radius(0);
  }

  // Custom edits for including btn-groups within btn-groups (useful for including dropdown buttons within a btn-group)
  > .btn-group {
    float: left;
  }

  > .btn-group:not(:first-child):not(:last-child) > .btn {
    border-radius: 0;
  }

  > .btn-group:first-child:not(:last-child) {
    > .btn:last-child,
    > .dropdown-toggle {
      @include border-right-radius(0);
    }
  }

  > .btn-group:last-child:not(:first-child) > .btn:first-child {
    @include border-left-radius(0);
  }
}

// Give the line between buttons some depth
.btn-group {
  > .btn + .dropdown-toggle {
    padding-left: 8px;
    padding-right: 8px;
  }

  > .btn-lg + .dropdown-toggle {
    padding-left: 12px;
    padding-right: 12px;
  }
}

// Modificators

.btn-group-lg > .btn {
  // line-height: ensure even-numbered height of button next to large input
  @include button-size($padding-large-vertical, $padding-large-horizontal, $font-size-large, $line-height-large, $btn-border-radius-large);
}
.btn-group-sm > .btn {
  // line-height: ensure proper height of button next to small input
  @include button-size($padding-small-vertical, $padding-small-horizontal, $font-size-small, $line-height-small, $btn-border-radius-small);
}
.btn-group-xs > .btn {
  @include button-size($padding-xs-vertical, $padding-xs-horizontal, $font-size-small, $line-height-small, $btn-border-radius-small);
}

// The clickable button for toggling the menu
// Remove the gradient and set the same inset shadow as the :active state
.btn-group.open .dropdown-toggle {
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125);

  // Show no shadow for `.btn-link` since it has no other button styles.
  &.btn-link {
    box-shadow: none;
  }
}

.btn-group-vertical {
  display: inline-block;
  position: relative;
  vertical-align: middle; // match .btn alignment given font-size hack above

  > .btn {
    position: relative;

    // Bring the "active" button to the front
    &:hover,
    &:active,
    &.active {
      z-index: 2;
    }
  }

  > .btn,
  > .btn-group,
  > .btn-group > .btn {
    display: block;
    float: none;
    max-width: 100%;
    width: 100%;
  }

  // Clear floats so dropdown menus can be properly placed
  > .btn-group {
    @include clearfix;

    > .btn {
      float: none;
    }
  }

  > .btn + .btn,
  > .btn + .btn-group,
  > .btn-group + .btn,
  > .btn-group + .btn-group {
    margin-left: 0;
    margin-top: -1px;
  }
}

.btn-group-vertical > .btn {
  &:not(:first-child):not(:last-child) {
    border-radius: 0;
  }
  &:first-child:not(:last-child) {
    @include border-bottom-radius(0);
    @include border-top-radius($btn-border-radius-base);
  }
  &:last-child:not(:first-child) {
    @include border-bottom-radius($btn-border-radius-base);
    @include border-top-radius(0);
  }
}

.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {
  border-radius: 0;
}

.btn-group-vertical > .btn-group:first-child:not(:last-child) {
  > .btn:last-child,
  > .dropdown-toggle {
    @include border-bottom-radius(0);
  }
}

.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {
  @include border-top-radius(0);
}

.btn-group-justified {
  border-collapse: separate;
  display: table;
  table-layout: fixed;
  width: 100%;

  > .btn,
  > .btn-group {
    display: table-cell;
    float: none;
    width: 1%;
  }

  > .btn-group .btn {
    width: 100%;
  }

  > .btn-group .dropdown-menu {
    left: auto;
  }
}

// Context

// Checkbox and radio options
//
// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.
//
// See https://github.com/twbs/bootstrap/pull/12794 and
// https://github.com/twbs/bootstrap/pull/14559 for more information.

[data-toggle="buttons"] {
  > .btn,
  > .btn-group > .btn {
    input[type="radio"],
    input[type="checkbox"] {
      clip: rect(0,0,0,0);
      pointer-events: none;
      position: absolute;
    }
  }
}
